﻿@using Do_An_Tot_Nghiep.Models
@model Topic

@{
    var currentUserId = Context.Session.GetString("USERID");
    var isOwner = !string.IsNullOrEmpty(currentUserId) && Model.UserId.ToString() == currentUserId;

    // Debug information
    System.Diagnostics.Debug.WriteLine($"Current User ID: {currentUserId}");
    System.Diagnostics.Debug.WriteLine($"Topic User ID: {Model.UserId}");
    System.Diagnostics.Debug.WriteLine($"Is Owner: {isOwner}");

    // Kiểm tra xem người dùng hiện tại đã like chủ đề chưa
    var isLiked = false;
    if (!string.IsNullOrEmpty(currentUserId) && int.TryParse(currentUserId, out int currentUserIdInt))
    {
        isLiked = Model.LikeTopics != null && Model.LikeTopics.Any(lp => lp.UserId == currentUserIdInt);
    }
    var likeCount = Model.LikeTopics?.Count ?? 0;

    // Kiểm tra xem người dùng hiện tại đã lưu chủ đề chưa
    var isSaved = false;
    if (!string.IsNullOrEmpty(currentUserId) && int.TryParse(currentUserId, out int currentUserIdInt2))
    {
        isSaved = Model.Saves != null && Model.Saves.Any(s => s.UserId == currentUserIdInt2);
    }
    var saveCount = Model.Saves?.Count ?? 0;
}

@if (Model != null)
{
    <div class="topic-announcement">
        <!-- Thông tin giảng viên -->
        <div class="author-info">
            <img src="@(string.IsNullOrEmpty(Model.User?.Avatar) ? "/css/img/default-avatar.jpg" : Model.User.Avatar)" alt="Avatar" class="avatar" />
            <div class="author-text">
                <strong>@Model.User.Username</strong> –
                <span class="role">
                    @{
                        var role = Model.User?.Role;
                        string roleText = role switch
                        {
                            "Lecturer" => "Giảng viên, CVHT",
                            "Admin" => "Nhân viên",
                            "Student" => "Sinh viên",
                            _ => "Người dùng"
                        };
                    }
                    @roleText
                </span>
                <br />
                @{
                    var type = Model.VisibilityType?.ToLower();
                    string icon = type switch
                    {
                        "public" => "🌍",
                        "private" => "🔒",
                        "group" => "👥",
                        "custom" => "⚙️",
                        _ => "❓"
                    };
                }
                <small>
                    Cập nhật lúc @Model.UpdatedAt?.ToString("HH:mm, dd/MM/yyyy")
                    <span class="ms-2">@icon</span>
                </small>
            </div>
            <div class="topic-actions">
                <button type="button" class="three-dots-btn" onclick="TopicManager.toggleMenu('@Model.TopicId', event)">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                @if (Model.UserId.ToString() == ViewBag.currentUserID)
                {

                    <div class="topic-menu" id="topic-menu-@Model.TopicId">
                        <a href="@Url.Action("Edit", "Topics", new { id = Model.TopicId })" class="menu-item">
                            <i class="fas fa-edit"></i> Chỉnh sửa
                        </a>
                        <a href="javascript:void(0);" onclick="TopicManager.showDeleteTopicModal('@Model.TopicId')" class="menu-item delete">
                            <i class="fas fa-trash"></i> Xóa
                        </a>
                    </div>
                }
            </div>
        </div>

        <!-- Tiêu đề -->
        <h2 class="title">@Html.Raw(Model.Title)</h2>

        <!-- Nội dung -->
        <p class="title" style="font-size: 16px; color: #555;">@Html.Raw(Model.Content)</p>

        <!-- Ảnh đính kèm -->
        @if (!string.IsNullOrEmpty(Model.ImageUrl))
        {
            <div class="timetable-image">
                <img src="@Url.Content(Model.ImageUrl)" alt="Ảnh đính kèm" />
            </div>
        }

        <!-- File đính kèm -->
        @if (!string.IsNullOrEmpty(Model.FileUrl))
        {
            <div class="attachment">
                <a href="@Model.FileUrl" target="_blank" class="attachment-link">
                    <i class="fas fa-file-pdf attachment-icon"></i>
                    <span class="attachment-name">@System.IO.Path.GetFileName(Model.FileUrl)</span>
                </a>
            </div>
        }

        <!-- Thẻ tag -->
        <div class="tags">
            @foreach (var tag in Model.TopicTags)
            {
                <span class="badge bg-secondary me-1">@tag.Tag?.Name</span>
            }
        </div>

        <!-- Nút phản hồi và like -->
        <div class="actions mt-3">
            <button class="action-btn like-btn @(isLiked ? "liked" : "")" onclick="TopicManager.toggleLike('@Model.TopicId')" data-topic-id="@Model.TopicId">
                <i class="fas fa-heart"></i>
                <span class="count-number">@likeCount</span>
            </button>
            <button class="action-btn comment-btn" type="button" onclick="TopicManager.toggleCommentBlock('@Model.TopicId')">
                <i class="fas fa-comment"></i>
                <span class="count-number">@(Model.Comments?.Count ?? 0)</span>
            </button>
            <button class="action-btn save-btn @(isSaved ? "saved" : "")" onclick="TopicManager.toggleSave('@Model.TopicId', 'topic')" data-topic-id="@Model.TopicId">
                <i class="fas fa-bookmark"></i>
                <span class="count-number">@saveCount</span>
            </button>
        </div>

        <!-- Khối comment -->
        <div class="comment-block mt-3" id="comment-block-@Model.TopicId" style="display: none;">
            <!-- Form bình luận chính -->
            <div class="comment-form">
                <form id="topic-commentForm-@Model.TopicId" onsubmit="TopicManager.submitComment(event, @Model.TopicId)" enctype="multipart/form-data" style="position: relative;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="TopicId" value="@Model.TopicId" />
                    <div class="mb-2 position-relative">
                        <textarea id="commentContent-@Model.TopicId" class="form-control comment-input" placeholder="Viết bình luận..." rows="2" required style="padding-right: 40px;"></textarea>
                        <label for="commentImage-@Model.TopicId" class="comment-image-label">
                            <i class="fas fa-image"></i>
                        </label>
                        <input type="file" id="commentImage-@Model.TopicId" class="form-control d-none" accept="image/*" />
                    </div>
                    <button type="submit" class="btn btn-purple comment-submit-btn">Gửi bình luận</button>
                </form>
            </div>

            <!-- Danh sách bình luận -->
            @if (Model.Comments != null && Model.Comments.Any())
            {
                <div class="comments-list mb-3" id="comments-list-@Model.TopicId">
                    @foreach (var comment in Model.Comments.Where(c => c.ParentCommentId == null).OrderByDescending(c => c.CreatedAt))
                    {
                        <div class="comment-item d-flex mb-3" id="topic-comment-@comment.CommentId">
                            <img src="@(string.IsNullOrEmpty(comment.User?.Avatar) ? "/css/img/default-avatar.jpg" : comment.User.Avatar)" alt="Avatar" class="comment-avatar me-2" />
                            <div class="comment-body">
                                <div class="comment-header d-flex justify-content-between">
                                    <div>
                                        <strong class="text-primary">
                                            @comment.User?.Username –
                                            @{
                                                var r = comment.User?.Role;
                                                string roleDisplayText = r switch
                                                {
                                                    "Lecturer" => "Giảng viên, CVHT",
                                                    "Admin" => "Nhân viên",
                                                    "Student" => "Sinh viên",
                                                    _ => "Người dùng"
                                                };
                                            }
                                            <span class="role">@roleDisplayText</span>
                                        </strong>
                                    </div>
                                    <small class="text-muted">@comment.CreatedAt.ToString("HH:mm, dd/MM/yyyy")</small>
                                </div>
                                <div class="comment-content">
                                    @Html.Raw(comment.Content)
                                    @if (!string.IsNullOrEmpty(comment.ImageUrl))
                                    {
                                        <div class="comment-image">
                                            <img src="@comment.ImageUrl" alt="Ảnh bình luận" />
                                        </div>
                                    }
                                </div>

                                <div class="comment-actions">
                                    <button class="custom-reply-btn" data-comment-id="@comment.CommentId">
                                        <i class="fas fa-reply"></i> Trả lời
                                    </button>
                                </div>

                                <!-- Form bình luận trả lời (cho comment cha) -->
                                <div class="reply-form mt-2" id="topic-reply-form-@comment.CommentId" style="display: none;">
                                    <form class="topic-nested-reply-form" onsubmit="TopicManager.submitReply(event, @comment.CommentId)" enctype="multipart/form-data" style="position: relative;">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="ParentCommentId" value="@comment.CommentId" />
                                        <input type="hidden" name="TopicId" value="@Model.TopicId" />
                                        <div class="mb-2 position-relative">
                                            <textarea name="Content" class="form-control comment-input" placeholder="Nhập phản hồi..." rows="2" required style="padding-right: 40px;"></textarea>
                                            <label for="replyImage-@comment.CommentId" class="comment-image-label">
                                                <i class="fas fa-image"></i>
                                            </label>
                                            <input type="file" id="replyImage-@comment.CommentId" name="ImageUpload" class="form-control d-none" accept="image/*" />
                                        </div>
                                        <div class="d-flex justify-content-end">
                                            <button type="button" class="btn btn-light me-2" onclick="TopicManager.toggleReplyForm('@comment.CommentId')">Hủy</button>
                                            <button type="submit" class="btn btn-purple comment-submit-btn">Gửi phản hồi</button>
                                        </div>
                                    </form>
                                </div>

                                <!-- Phần replies -->
                                <div class="nested-replies" id="topic-replies-@comment.CommentId">
                                    @if (comment.Replies != null && comment.Replies.Any())
                                    {
                                        @Html.Partial("_CommentReplies", new { replies = comment.Replies.OrderBy(r => r.CreatedAt).ToList(), level = 1 })
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="modal fade" id="deleteTopicModal" tabindex="-1" aria-labelledby="deleteTopicModalLabel" aria-hidden="true">
            @Html.AntiForgeryToken()
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteTopicModalLabel">Xác nhận xóa chủ đề</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                    </div>
                    <div class="modal-body">
                        Bạn có chắc chắn muốn xóa chủ đề này không?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                        <button type="button" class="btn btn-danger" id="confirmDeleteTopicBtn">Xóa</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal xác nhận xóa -->

<style>
    .topic-announcement {
        border: 1px solid #eee;
        padding: 20px;
        border-radius: 12px;
        background-color: #fff;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
        font-family: 'Segoe UI', sans-serif;
    }

    .author-info {
        display: flex;
        align-items: center;
        margin-bottom: 12px;
    }

    .avatar {
        width: 55px;
        height: 55px;
        border-radius: 50%;
        margin-right: 15px;
        border: 2px solid #f0f0f0;
    }

    .author-text {
        font-size: 0.95rem;
        color: #333;
    }

    .role {
        color: #c300c3;
        font-weight: 600;
    }

    .title {
        font-size: 20px;
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .custom-reply-btn {
        font-size: 0.85rem;
        color: #800080;
        padding: 4px 10px;
        background-color: transparent;
        border: none;
        cursor: pointer;
    }

        .custom-reply-btn:hover {
            text-decoration: underline;
            color: #a000a0;
        }

    .timetable-image {
        text-align: center;
        margin-top: 15px;
    }

        .timetable-image img {
            max-width: 80%;
            max-height: 300px;
            object-fit: contain;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }

    .comment-item {
        display: flex;
        margin-bottom: 12px;
        align-items: flex-start;
    }

    .comment-body {
        flex: 1;
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .comment-avatar {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        margin-right: 15px;
    }

    .comment-content {
        margin: 8px 0;
        font-size: 0.95rem;
        color: #333;
        padding: 8px 12px;
        background-color: #fff;
        border-radius: 12px;
    }

    .reply-form textarea {
        width: 100%;
        border-radius: 8px;
        padding: 8px;
        font-size: 0.9rem;
        border: 1px solid #ccc;
        box-sizing: border-box;
    }

    .actions {
        display: flex;
        gap: 15px;
        padding: 8px 0;
        border-top: 1px solid #eee;
        margin-top: 15px;
    }

    .action-btn {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 8px 16px;
        border: none;
        background: transparent;
        border-radius: 20px;
        color: #65676b;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .action-btn:hover {
            background-color: #f0f2f5;
        }

        .action-btn i {
            font-size: 18px;
        }

    .like-btn.liked {
        color: #e0245e;
    }

        .like-btn.liked i {
            animation: likeAnimation 0.3s ease;
        }

    .comment-btn:hover {
        color: #1877f2;
    }

    .count-number {
        font-size: 14px;
        font-weight: 500;
    }

    @@ keyframes likeAnimation {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.2);
        }

        100% {
            transform: scale(1);
        }
    }

    .reply-toggle {
        border: none;
        background-color: transparent;
        color: #800080;
        font-size: 18px;
        cursor: pointer;
        padding: 0;
    }

    .btn {
        background: #9c27b0;
        margin-top: 5px;
        padding: 6px 15px;
        font-size: 0.85rem;
    }

    .btn-purple {
        background-color: #1877f2;
        color: white;
        border: none;
        padding: 6px 12px;
        font-size: 0.85rem;
        border-radius: 6px;
        font-weight: 600;
        transition: background-color 0.2s ease;
    }

        .btn-purple:hover {
            background-color: #166fe5;
            color: white;
        }

    .reply-item[data-level="1"] {
        margin-left: 0 !important;
    }

    .reply-item[data-level="2"] {
        margin-left: 45px !important;
    }

    .reply-item[data-level="3"],
    .reply-item[data-level="4"],
    .reply-item[data-level="5"],
    .reply-item[data-level="6"] {
        margin-left: 45px !important;
    }

        .reply-item[data-level="3"] .reply-line,
        .reply-item[data-level="4"] .reply-line,
        .reply-item[data-level="5"] .reply-line,
        .reply-item[data-level="6"] .reply-line {
            display: none !important;
        }

    .nested-replies {
        margin-left: 0 !important;
        padding-left: 0 !important;
    }

    .reply-item {
        padding-left: 0 !important;
    }

    .reply-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .reply-content {
        flex: 1;
        background-color: #fff;
        padding: 12px;
        border-radius: 12px;
        position: relative;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .reply-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .reply-text {
        margin: 8px 0;
        font-size: 0.95rem;
        color: #333;
        padding: 8px 12px;
        background-color: #fff;
        border-radius: 12px;
    }

    .nested-reply-form {
        margin-top: 8px;
        background-color: #f0f2f5;
        padding: 8px 12px;
        border-radius: 8px;
    }

        .nested-reply-form textarea {
            background-color: #fff;
            border: 1px solid #ccd0d5;
            border-radius: 6px;
            padding: 8px 12px;
        }

    .comment-image img,
    .reply-image img {
        max-width: 300px;
        border-radius: 8px;
        margin-top: 8px;
        border: 1px solid #dadde1;
    }

    .role {
        color: #65676b;
        font-weight: 500;
        font-size: 0.9rem;
    }

    .reply-time, .text-muted {
        color: #65676b !important;
        font-size: 0.85rem;
    }

    .reply-header strong, .comment-header strong {
        font-size: 0.95rem;
        color: #050505;
    }

    .topic-actions {
        position: relative;
        margin-left: auto;
        z-index: 1000;
    }

    .three-dots-btn {
        background: none;
        border: none;
        color: #65676b;
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 50%;
        transition: background-color 0.2s;
        font-size: 20px;
        line-height: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
    }

        .three-dots-btn:hover {
            background-color: #f0f2f5;
        }

    .topic-menu {
        position: absolute;
        right: 0;
        top: 100%;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        padding: 8px 0;
        min-width: 160px;
        display: none;
        z-index: 1001;
    }

        .topic-menu.show {
            display: block !important;
        }

    .menu-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 16px;
        color: #050505;
        text-decoration: none;
        transition: background-color 0.2s;
        font-size: 14px;
        cursor: pointer;
        white-space: nowrap;
    }

        .menu-item i {
            width: 16px;
        }

        .menu-item:hover {
            background-color: #f0f2f5;
            text-decoration: none;
        }

        .menu-item.delete {
            color: #dc3545;
        }

            .menu-item.delete:hover {
                background-color: #ffebee;
                color: #dc3545;
                text-decoration: none;
            }

    .save-btn {
        color: #65676b;
    }

        .save-btn.saved {
            color: #1877f2;
        }

            .save-btn.saved i {
                animation: saveAnimation 0.3s ease;
            }

    @@keyframes saveAnimation {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.2);
        }

        100% {
            transform: scale(1);
        }
    }

    .comment-input {
        border-radius: 20px;
        border: 1px solid #ccc;
        padding: 10px 16px;
        font-size: 1rem;
        background: #f9f9fb;
        box-shadow: none;
        outline: none;
        resize: none;
        transition: border 0.2s;
    }

        .comment-input:focus {
            border: 1.5px solid #a259c3;
            background: #fff;
            box-shadow: 0 2px 8px rgba(162,89,195,0.08);
        }

    .comment-image-label {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #a259c3;
        font-size: 22px;
        cursor: pointer;
        z-index: 2;
        background: #fff;
        border-radius: 50%;
        padding: 2px 4px;
        transition: background 0.2s;
    }

        .comment-image-label:hover {
            background: #f3e6fa;
        }

    .comment-submit-btn {
        background: linear-gradient(90deg, #a259c3 0%, #7b2ff2 100%);
        color: #fff;
        border: none;
        border-radius: 20px;
        padding: 7px 22px;
        font-weight: 600;
        font-size: 1rem;
        margin-top: 4px;
        box-shadow: 0 2px 8px rgba(162,89,195,0.08);
        transition: background 0.2s;
    }

        .comment-submit-btn:hover {
            background: linear-gradient(90deg, #7b2ff2 0%, #a259c3 100%);
            color: #fff;
        }
</style>