@using Do_An_Tot_Nghiep.Models
@model Document

@{
    var currentUserId = Context.Session.GetString("USERID");
    var isOwner = !string.IsNullOrEmpty(currentUserId) && Model.UserId.ToString() == currentUserId;

    // Debug information
    System.Diagnostics.Debug.WriteLine($"Current User ID: {currentUserId}");
    System.Diagnostics.Debug.WriteLine($"Document User ID: {Model.UserId}");
    System.Diagnostics.Debug.WriteLine($"Is Owner: {isOwner}");

    // Kiểm tra xem người dùng hiện tại đã like tài liệu chưa
    var isLiked = false;
    if (!string.IsNullOrEmpty(currentUserId) && int.TryParse(currentUserId, out int currentUserIdInt))
    {
        isLiked = Model.LikeDocuments != null && Model.LikeDocuments.Any(lp => lp.UserId == currentUserIdInt);
    }
    var likeCount = Model.LikeDocuments?.Count ?? 0;

    // Kiểm tra xem người dùng hiện tại đã lưu tài liệu chưa
    var isSaved = false;
    if (!string.IsNullOrEmpty(currentUserId) && int.TryParse(currentUserId, out int currentUserIdInt2))
    {
        isSaved = Model.Saves != null && Model.Saves.Any(s => s.UserId == currentUserIdInt2);
    }
    var saveCount = Model.Saves?.Count ?? 0;
}

@if (Model != null)
{
    <div class="document-announcement">
        <!-- Thông tin giảng viên -->
        <div class="author-info">
            <img src="@(string.IsNullOrEmpty(Model.User?.Avatar) ? "/css/img/default-avatar.jpg" : Model.User.Avatar)" alt="Avatar" class="avatar" />
            <div class="author-text">
                <strong>@Model.User.Username</strong> –
                <span class="role">
                    @{
                        var role = Model.User?.Role;
                        string roleText = role switch
                        {
                            "Lecturer" => "Giảng viên, CVHT",
                            "Admin" => "Nhân viên",
                            "Student" => "Sinh viên",
                            _ => "Người dùng"
                        };
                    }
                    @roleText
                </span>
                <br />
                @{
                    var type = Model.VisibilityType?.ToLower();
                    string icon = type switch
                    {
                        "public" => "🌍",
                        "private" => "🔒",
                        "group" => "👥",
                        "custom" => "⚙️",
                        _ => "❓"
                    };
                }
                <small>
                    Cập nhật lúc @Model.UpdatedAt?.ToString("HH:mm, dd/MM/yyyy")
                    <span class="ms-2">@icon</span>
                </small>
            </div>
            <div class="document-actions">
                <button type="button" class="three-dots-btn" onclick="event.stopPropagation(); toggleDocumentMenu('@Model.DocumentId')">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <div class="document-menu" id="document-menu-@Model.DocumentId">
                    @if (Model.UserId.ToString() == ViewBag.currentUserID)
                    {
                        <a href="@Url.Action("Edit", "Documents", new { id = Model.DocumentId })" class="menu-item">
                            <i class="fas fa-edit"></i> Chỉnh sửa
                        </a>
                        <a href="javascript:void(0);" onclick="showDeleteDocumentModal('@Model.DocumentId')" class="menu-item delete">
                            <i class="fas fa-trash"></i> Xóa
                        </a>
                    }
                </div>
            </div>
        </div>

        <!-- Tiêu đề -->
        <h2 class="title">@Html.Raw(Model.Title)</h2>

        <!-- Nội dung -->
        <p class="title" style="font-size: 16px; color: #555;">@Html.Raw(Model.Content)</p>

        <!-- File đính kèm -->
        @if (!string.IsNullOrEmpty(Model.ImageUrl))
        {
            <div class="timetable-image">
                <img src="@Url.Content(Model.ImageUrl)" alt="Ảnh đính kèm" />
            </div>
        }

        <!-- File đính kèm -->
        @if (!string.IsNullOrEmpty(Model.FileUrl))
        {
            <div class="attachment">
                <a href="@Model.FileUrl" target="_blank" class="attachment-link">
                    <i class="fas fa-file-pdf attachment-icon"></i>
                    <span class="attachment-name">@System.IO.Path.GetFileName(Model.FileUrl)</span>
                </a>
            </div>
        }
        <!-- Nút phản hồi và like -->
        <div class="actions mt-3">
            <button class="action-btn like-btn @(isLiked ? "liked" : "")" onclick="toggleDocumentLike('@Model.DocumentId')" data-document-id="@Model.DocumentId">
                <i class="fas fa-heart"></i>
                <span class="count-number">@likeCount</span>
            </button>
            <button class="action-btn comment-btn" type="button" onclick="toggleCommentBlock('@Model.DocumentId')">
                <i class="fas fa-comment"></i>
                <span class="count-number">@(Model.CommentDocuments?.Count ?? 0)</span>
            </button>
            <button class="action-btn save-btn @(isSaved ? "saved" : "")" onclick="toggleSave('@Model.DocumentId', 'document')" data-document-id="@Model.DocumentId">
                <i class="fas fa-bookmark"></i>
                <span class="count-number">@saveCount</span>
            </button>
        </div>

        <!-- Khối comment -->
        <div class="comment-block mt-3" id="comment-block-@Model.DocumentId" style="display: none;">
            <!-- Form bình luận chính -->
            <div class="comment-form">
                <form id="commentForm-@Model.DocumentId" class="comment-form" onsubmit="submitDocumentComment(event, @Model.DocumentId)">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="DocumentId" value="@Model.DocumentId" />
                    <div class="mb-2">
                        <textarea name="Content" class="form-control" placeholder="Viết bình luận..." rows="3" required></textarea>
                    </div>
                    <div class="mb-2">
                        <input type="file" name="ImageUpload" class="form-control" accept="image/*" />
                    </div>
                    <button type="submit" class="btn btn-purple">Gửi bình luận</button>
                </form>
            </div>

            <!-- Danh sách bình luận -->
            @if (Model.CommentDocuments != null && Model.CommentDocuments.Any())
            {
                <div class="comments-list mb-3" id="comments-list-@Model.DocumentId">
                    @foreach (var comment in Model.CommentDocuments.Where(c => c.ParentCommentId == null).OrderByDescending(c => c.CreatedAt))
                    {
                        <div class="comment-item d-flex mb-3" id="comment-@comment.CommentDocumentId">
                            <img src="@(string.IsNullOrEmpty(comment.User?.Avatar) ? "/css/img/default-avatar.jpg" : comment.User.Avatar)" alt="Avatar" class="comment-avatar me-2" />
                            <div class="comment-body">
                                <div class="comment-header d-flex justify-content-between">
                                    <div>
                                        <strong class="text-primary">
                                            @comment.User?.Username –
                                            @{
                                                var r = comment.User?.Role;
                                                string roleDisplayText = r switch
                                                {
                                                    "Lecturer" => "Giảng viên, CVHT",
                                                    "Admin" => "Nhân viên",
                                                    "Student" => "Sinh viên",
                                                    _ => "Người dùng"
                                                };
                                            }
                                            <span class="role">@roleDisplayText</span>
                                        </strong>
                                    </div>
                                    <small class="text-muted">@comment.CreatedAt.ToString("HH:mm, dd/MM/yyyy")</small>
                                </div>
                                <div class="comment-content">
                                    @Html.Raw(comment.Content)
                                    @if (!string.IsNullOrEmpty(comment.ImageUrl))
                                    {
                                        <div class="comment-image">
                                            <img src="@comment.ImageUrl" alt="Ảnh bình luận" />
                                        </div>
                                    }
                                </div>

                                <div class="comment-actions">
                                    <button class="custom-reply-btn" onclick="toggleReplyForm('@comment.CommentDocumentId')">
                                        <i class="fas fa-reply"></i> Trả lời
                                    </button>
                                </div>

                                <!-- Form bình luận trả lời -->
                                <div class="reply-form mt-2" id="reply-form-@comment.CommentDocumentId" style="display: none;">
                                    <form class="nested-reply-form" onsubmit="submitReply(event, @comment.CommentDocumentId)" enctype="multipart/form-data">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="ParentCommentId" value="@comment.CommentDocumentId" />
                                        <input type="hidden" name="DocumentId" value="@Model.DocumentId" />
                                        <div class="mb-2">
                                            <textarea name="Content" class="form-control" placeholder="Nhập phản hồi..." rows="2" required></textarea>
                                        </div>
                                        <div class="mb-2">
                                            <input type="file" name="ImageUpload" class="form-control" accept="image/*" />
                                        </div>
                                        <div class="d-flex justify-content-end">
                                            <button type="button" class="btn btn-light me-2" onclick="toggleReplyForm('@comment.CommentDocumentId')">Hủy</button>
                                            <button type="submit" class="btn btn-purple">Gửi phản hồi</button>
                                        </div>
                                    </form>
                                </div>

                                <!-- Phần replies -->
                                <div class="nested-replies" id="replies-@comment.CommentDocumentId">
                                    @if (comment.Replies != null && comment.Replies.Any())
                                    {
                                        @foreach (var reply in comment.Replies.OrderBy(r => r.CreatedAt))
                                        {
                                            <div class="reply-item" id="reply-@reply.CommentDocumentId">
                                                <div class="reply-line"></div>
                                                <div class="d-flex">
                                                    <img src="@(string.IsNullOrEmpty(reply.User?.Avatar) ? "/css/img/default-avatar.jpg" : reply.User.Avatar)" alt="Avatar" class="reply-avatar" />
                                                    <div class="reply-content">
                                                        <div class="reply-header">
                                                            <strong class="reply-username">
                                                                @reply.User?.Username –
                                                                @{
                                                                    var replyRole = reply.User?.Role;
                                                                    string replyRoleText = replyRole switch
                                                                    {
                                                                        "Lecturer" => "Giảng viên, CVHT",
                                                                        "Admin" => "Nhân viên",
                                                                        "Student" => "Sinh viên",
                                                                        _ => "Người dùng"
                                                                    };
                                                                }
                                                                <span class="role">@replyRoleText</span>
                                                            </strong>
                                                            <small class="reply-time">@reply.CreatedAt.ToString("HH:mm, dd/MM/yyyy")</small>
                                                        </div>
                                                        <div class="reply-text">
                                                            @Html.Raw(reply.Content)
                                                            @if (!string.IsNullOrEmpty(reply.ImageUrl))
                                                            {
                                                                <div class="reply-image">
                                                                    <img src="@reply.ImageUrl" alt="Ảnh phản hồi" />
                                                                </div>
                                                            }
                                                        </div>
                                                        <div class="reply-actions">
                                                            <button class="custom-reply-btn" onclick="toggleReplyForm('@reply.CommentDocumentId')">
                                                                <i class="fas fa-reply"></i> Trả lời
                                                            </button>
                                                        </div>

                                                        <!-- Form trả lời cho reply -->
                                                        <div class="reply-form mt-2" id="reply-form-@reply.CommentDocumentId" style="display: none;">
                                                            <form class="nested-reply-form" onsubmit="submitReply(event, @reply.CommentDocumentId)" enctype="multipart/form-data">
                                                                @Html.AntiForgeryToken()
                                                                <input type="hidden" name="ParentCommentId" value="@reply.CommentDocumentId" />
                                                                <input type="hidden" name="DocumentId" value="@Model.DocumentId" />
                                                                <div class="mb-2">
                                                                    <textarea name="Content" class="form-control" placeholder="Nhập phản hồi..." rows="2" required></textarea>
                                                                </div>
                                                                <div class="mb-2">
                                                                    <input type="file" name="ImageUpload" class="form-control" accept="image/*" />
                                                                </div>
                                                                <div class="d-flex justify-content-end">
                                                                    <button type="button" class="btn btn-light me-2" onclick="toggleReplyForm('@reply.CommentDocumentId')">Hủy</button>
                                                                    <button type="submit" class="btn btn-purple">Gửi phản hồi</button>
                                                                </div>
                                                            </form>
                                                        </div>
                                                        <div class="nested-replies" id="replies-@reply.CommentDocumentId"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}
<script>
    var documentIdToDelete = null;

    function toggleCommentBlock(documentId) {
        const block = document.getElementById(`comment-block-${documentId}`);
        const wasHidden = block.style.display === 'none';
        block.style.display = wasHidden ? 'block' : 'none';

        if (wasHidden) {
            const textarea = block.querySelector('textarea');
            if (textarea) textarea.focus();
        }
    }

    function toggleReplyForm(commentId) {
        var form = document.getElementById('reply-form-' + commentId);
        if (form) {
            form.style.display = (form.style.display === 'none' || form.style.display === '') ? 'block' : 'none';
            if (form.style.display === 'block') {
                var textarea = form.querySelector('textarea');
                if (textarea) textarea.focus();
            }
        }
    }

    function toggleDocumentMenu(documentId) {
        event.stopPropagation();
        const menu = document.getElementById(`document-menu-${documentId}`);
        if (!menu) return;

        const isVisible = menu.classList.contains('show');

        // Hide all menus first
        document.querySelectorAll('.post-menu, .document-menu, .topic-menu').forEach(m => {
            m.classList.remove('show');
        });

        // Show this menu if it wasn't visible
        if (!isVisible) {
            menu.classList.add('show');
        }
    }

    function showDeleteDocumentModal(documentId) {
        documentIdToDelete = documentId;
        const modal = new bootstrap.Modal(document.getElementById('deleteDocumentModal'));
        modal.show();
    }

    document.addEventListener('DOMContentLoaded', function() {
        const confirmDeleteBtn = document.getElementById('confirmDeleteDocumentBtn');
        if (confirmDeleteBtn) {
            confirmDeleteBtn.onclick = function() {
                if (documentIdToDelete) {
                    fetch(`/Documents/Delete/${documentIdToDelete}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        }
                    })
                    .then(response => {
                        if (response.redirected) {
                            window.location.href = response.url;
                        } else {
                            window.location.reload();
                        }
                    });
                }
            };
        }
    });

    function getRoleText(role) {
        switch (role) {
            case 'Lecturer': return 'Giảng viên, CVHT';
            case 'Admin': return 'Nhân viên';
            case 'Student': return 'Sinh viên';
            default: return 'Người dùng';
        }
    }

    function createDocumentCommentElement(comment, documentId) {
        return `
            <div class="comment-item d-flex mb-3" id="comment-${comment.id}">
                <img src="${comment.avatar}" alt="Avatar" class="comment-avatar me-2" />
                <div class="comment-body">
                    <div class="comment-header d-flex justify-content-between">
                        <div>
                            <strong class="text-primary">
                                ${comment.username} –
                                <span class="role">${getRoleText(comment.role)}</span>
                            </strong>
                        </div>
                        <small class="text-muted">${comment.createdAt}</small>
                    </div>
                    <div class="comment-content">
                        ${comment.content}
                        ${comment.imageUrl ? `<div class='comment-image'><img src='${comment.imageUrl}' alt='Ảnh bình luận' /></div>` : ''}
                    </div>
                    <div class="comment-actions">
                        <button class="custom-reply-btn" onclick="toggleReplyForm('${comment.id}')">
                            <i class="fas fa-reply"></i> Trả lời
                        </button>
                    </div>
                    <div class="reply-form mt-2" id="reply-form-${comment.id}" style="display: none;">
                        <form class="nested-reply-form" onsubmit="submitReply(event, ${comment.id})" enctype="multipart/form-data">
                            <input type="hidden" name="ParentCommentId" value="${comment.id}" />
                            <input type="hidden" name="DocumentId" value="${documentId}" />
                            <input type="hidden" name="__RequestVerificationToken" value="${document.querySelector('input[name=__RequestVerificationToken]')?.value || ''}" />
                            <div class="mb-2">
                                <textarea name="Content" class="form-control" placeholder="Nhập phản hồi..." rows="2" required></textarea>
                            </div>
                            <div class="mb-2">
                                <input type="file" name="ImageUpload" class="form-control" accept="image/*" />
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="button" class="btn btn-light me-2" onclick="toggleReplyForm('${comment.id}')">Hủy</button>
                                <button type="submit" class="btn btn-purple">Gửi phản hồi</button>
                            </div>
                        </form>
                    </div>
                    <div class="nested-replies" id="replies-${comment.id}"></div>
                </div>
            </div>
        `;
    }

    function createDocumentReplyElement(reply, documentId, level = 1) {
        const globalToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
        const levelClass = level === 1 ? 'reply-level-1' : 'reply-level-2';
        return `
            <div class="reply-item ${levelClass}" id="reply-${reply.id}">
                <div class="reply-line"></div>
                <div class="d-flex">
                    <img src="${reply.avatar}" alt="Avatar" class="reply-avatar" />
                    <div class="reply-content">
                        <div class="reply-header">
                            <strong class="reply-username">
                                ${reply.username} –
                                <span class="role">${getRoleText(reply.role)}</span>
                            </strong>
                            <small class="reply-time">${reply.createdAt}</small>
                        </div>
                        <div class="reply-text">
                            ${reply.content}
                            ${reply.imageUrl ? `<div class='reply-image'><img src='${reply.imageUrl}' alt='Ảnh phản hồi' /></div>` : ''}
                        </div>
                        <div class="reply-actions">
                            <button class="custom-reply-btn" onclick="toggleReplyForm('${reply.id}')">
                                <i class="fas fa-reply"></i> Trả lời
                            </button>
                        </div>
                        <div class="reply-form mt-2" id="reply-form-${reply.id}" style="display: none;">
                            <form class="nested-reply-form" onsubmit="submitReply(event, ${reply.id})" enctype="multipart/form-data">
                                <input type="hidden" name="ParentCommentId" value="${reply.id}" />
                                <input type="hidden" name="DocumentId" value="${documentId}" />
                                <input type="hidden" name="__RequestVerificationToken" value="${globalToken}" />
                                <div class="mb-2">
                                    <textarea name="Content" class="form-control" placeholder="Nhập phản hồi..." rows="2" required></textarea>
                                </div>
                                <div class="mb-2">
                                    <input type="file" name="ImageUpload" class="form-control" accept="image/*" />
                                </div>
                                <div class="d-flex justify-content-end">
                                    <button type="button" class="btn btn-light me-2" onclick="toggleReplyForm('${reply.id}')">Hủy</button>
                                    <button type="submit" class="btn btn-purple">Gửi phản hồi</button>
                                </div>
                            </form>
                        </div>
                        <div class="nested-replies" id="replies-${reply.id}"></div>
                    </div>
                </div>
            </div>
        `;
    }

    async function submitDocumentComment(event, documentId) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        const tokenInput = form.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenInput ? tokenInput.value : '';
        try {
            const response = await fetch('/CommentDocuments/Create', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': token
                }
            });
            const result = await response.json();
            if (result.success) {
                const commentsList = document.getElementById('comments-list-' + documentId);
                if (commentsList) {
                    commentsList.insertAdjacentHTML('afterbegin', createDocumentCommentElement(result.comment, documentId));
                }
                form.reset();
            } else {
                alert(result.message || 'Có lỗi xảy ra khi thêm bình luận');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Có lỗi xảy ra khi thêm bình luận');
        }
    }

    async function submitReply(event, parentCommentId) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        const documentId = form.querySelector('input[name="DocumentId"]').value;
        const tokenInput = form.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenInput ? tokenInput.value : '';
        try {
            const response = await fetch('/CommentDocuments/CreateResponse', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': token
                }
            });
            const result = await response.json();
            if (result.success) {
                let repliesContainer = document.getElementById('replies-' + parentCommentId);
                if (!repliesContainer) {
                    const parentElement = document.getElementById('reply-' + parentCommentId) || document.getElementById('comment-' + parentCommentId);
                    if (parentElement) {
                        const replyContent = parentElement.querySelector('.reply-content') || parentElement.querySelector('.comment-body');
                        if (replyContent) {
                            repliesContainer = document.createElement('div');
                            repliesContainer.className = 'nested-replies';
                            repliesContainer.id = 'replies-' + parentCommentId;
                            replyContent.appendChild(repliesContainer);
                        }
                    }
                }
                // Xác định cấp độ reply
                let level = 1;
                const parentReply = document.getElementById('reply-' + parentCommentId);
                if (parentReply) {
                    level = 2;
                }
                if (repliesContainer) {
                    repliesContainer.insertAdjacentHTML('beforeend', createDocumentReplyElement(result.reply, documentId, level));
                }
                form.reset();
                toggleReplyForm(parentCommentId);
            } else {
                alert(result.message || 'Có lỗi xảy ra khi thêm phản hồi');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Có lỗi xảy ra khi thêm phản hồi');
        }
    }

    function toggleSave(id, type) {
        const saveBtn = document.querySelector(`.save-btn[data-${type}-id="${id}"]`);
        const saveCountSpan = saveBtn.querySelector('.count-number');
        
        fetch(`/Saves/ToggleSave/${type}/${id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
            if (data.needLogin) {
                window.location.href = '/Account/Login';
                return;
            }
            if (data.success) {
                if (data.isSaved) {
                    saveBtn.classList.add('saved');
                } else {
                    saveBtn.classList.remove('saved');
                }
                saveCountSpan.textContent = data.saveCount;
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Có lỗi xảy ra khi thực hiện thao tác. Vui lòng thử lại sau.');
        });
    }
</script>

<style>
    .document-announcement {
        border: 1px solid #eee;
        padding: 20px;
        border-radius: 12px;
        background-color: #fff;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
        font-family: 'Segoe UI', sans-serif;
    }

    .author-info {
        display: flex;
        align-items: center;
        margin-bottom: 12px;
    }

    .avatar {
        width: 55px;
        height: 55px;
        border-radius: 50%;
        margin-right: 15px;
        border: 2px solid #f0f0f0;
    }

    .author-text {
        font-size: 0.95rem;
        color: #333;
    }

    .role {
        color: #c300c3;
        font-weight: 600;
    }

    .title {
        font-size: 20px;
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .custom-reply-btn {
        font-size: 0.85rem;
        color: #800080;
        padding: 4px 10px;
        background-color: transparent;
        border: none;
        cursor: pointer;
    }

        .custom-reply-btn:hover {
            text-decoration: underline;
            color: #a000a0;
        }

    .attachment {
        margin-top: 15px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .attachment-icon {
        color: #dc3545;
        font-size: 20px;
    }

    .attachment-name {
        color: #0d6efd;
        text-decoration: none;
    }

        .attachment-name:hover {
            text-decoration: underline;
        }

    .comment-item {
        display: flex;
        margin-bottom: 12px;
        align-items: flex-start;
    }

    .comment-body {
        flex: 1;
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .comment-avatar {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        margin-right: 15px;
    }

    .comment-content {
        margin: 8px 0;
        font-size: 0.95rem;
        color: #333;
        padding: 8px 12px;
        background-color: #fff;
        border-radius: 12px;
    }

    .reply-form textarea {
        width: 100%;
        border-radius: 8px;
        padding: 8px;
        font-size: 0.9rem;
        border: 1px solid #ccc;
        box-sizing: border-box;
    }

    .actions {
        display: flex;
        gap: 15px;
        padding: 8px 0;
        border-top: 1px solid #eee;
        margin-top: 15px;
    }

    .action-btn {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 8px 16px;
        border: none;
        background: transparent;
        border-radius: 20px;
        color: #65676b;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .action-btn:hover {
            background-color: #f0f2f5;
        }

        .action-btn i {
            font-size: 18px;
        }

    .like-btn.liked {
        color: #e0245e;
    }

        .like-btn.liked i {
            animation: likeAnimation 0.3s ease;
        }

    .comment-btn:hover {
        color: #1877f2;
    }

    .count-number {
        font-size: 14px;
        font-weight: 500;
    }

    @@keyframes likeAnimation {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.2);
        }

        100% {
            transform: scale(1);
        }
    }

    .document-actions {
        position: relative;
        margin-left: auto;
        z-index: 1000;
    }

    .three-dots-btn {
        background: none;
        border: none;
        color: #65676b;
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 50%;
        transition: background-color 0.2s;
        font-size: 20px;
        line-height: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
    }

        .three-dots-btn:hover {
            background-color: #f0f2f5;
        }

    .document-menu {
        position: absolute;
        right: 0;
        top: 100%;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        padding: 8px 0;
        min-width: 160px;
        display: none;
        z-index: 1001;
    }

        .document-menu.show {
            display: block !important;
        }

    .menu-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 16px;
        color: #050505;
        text-decoration: none;
        transition: background-color 0.2s;
        font-size: 14px;
        cursor: pointer;
        white-space: nowrap;
    }

        .menu-item i {
            width: 16px;
        }

        .menu-item:hover {
            background-color: #f0f2f5;
            text-decoration: none;
        }

        .menu-item.delete {
            color: #dc3545;
        }

            .menu-item.delete:hover {
                background-color: #ffebee;
                color: #dc3545;
                text-decoration: none;
            }

    .nested-replies {
        margin-left: 20px;
        border-left: 1px solid #eee;
        padding-left: 15px;
    }

    .reply-item {
        margin-bottom: 12px;
    }

    .reply-line {
        height: 1px;
        background-color: #eee;
        margin-bottom: 12px;
    }

    .reply-avatar {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        margin-right: 15px;
    }

    .reply-content {
        flex: 1;
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .reply-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .reply-username {
        font-weight: 600;
    }

    .reply-time {
        color: #808080;
        font-size: 0.85rem;
    }

    .reply-text {
        margin-bottom: 8px;
    }

    .reply-image {
        margin-top: 8px;
        margin-left: 15px;
    }

    .reply-actions {
        margin-top: 8px;
        text-align: right;
    }

    .save-btn {
        color: #65676b;
    }

    .save-btn.saved {
        color: #1877f2;
    }

    .save-btn.saved i {
        animation: saveAnimation 0.3s ease;
    }

    @@keyframes saveAnimation {
        0% { transform: scale(1); }
        50% { transform: scale(1.2); }
        100% { transform: scale(1); }
    }
</style>

<!-- Modal xác nhận xóa -->
<div class="modal fade" id="deleteDocumentModal" tabindex="-1" aria-labelledby="deleteDocumentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteDocumentModalLabel">Xác nhận xóa tài liệu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <div class="modal-body">
                Bạn có chắc chắn muốn xóa tài liệu này không?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteDocumentBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>